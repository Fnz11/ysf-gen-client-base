import React, { useState, useEffect, useRef, useCallback } from "react";
import { cn } from "@/lib/utils";
import { Input } from "./input";
import {
  Popover,
  PopoverAnchor,
  PopoverContent,
  PopoverTrigger,
} from "./popover";
import { AnimatePresence, motion } from "framer-motion";
import { Check, ChevronDown, CircleIcon, Loader2 } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { ScrollArea } from "./scroll-area";
import { debounce } from "lodash";

type DataProps = {
  label: string;
  value: string;
  description: string;
  disabled?: boolean;
};

type ComboboxProps = {
  onChange: (value: string | string[]) => void;
  id: string;
  value: string | string[];
  getInitialData?: () => Promise<DataProps[]>;
  getData: (value: string) => Promise<DataProps[]>;
  parentClassName?: string;
  contentClassName?: string;
  placeholder?: string;
  multiple?: boolean;
  alwaysOpen?: boolean;
};

export function Combobox({
  onChange,
  value,
  getData,
  id,
  parentClassName,
  getInitialData,
  contentClassName,
  placeholder = "Enter here",
  multiple,
  alwaysOpen,
}: ComboboxProps) {
  const [showData, setShowData] = useState<DataProps[]>([]);
  const [initialData, setInitialData] = useState<DataProps[]>([]);
  const [open, setOpen] = useState(alwaysOpen ? true : false);
  const [{ shadowInput, inputValue }, setInputValue] = useState<{
    shadowInput: string;
    inputValue: string;
  }>({ shadowInput: "", inputValue: "" });
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);
  const [selectedItems, setSelectedItems] = useState<string[]>(
    multiple ? (value as string[]) : []
  );
  const inputRef = useRef<HTMLInputElement>(null);

  const { isSuccess, data, isLoading } = useQuery({
    queryKey: ["combobox-" + id, inputValue],
    queryFn: async () => {
      return await getData(inputValue || "");
    },
  });

  useEffect(() => {
    if (getInitialData && initialData.length === 0) {
      getInitialData().then((data) => {
        if (data.length === 0) return;
        setInitialData(data);
        setSelectedItems(data.map((item) => item.value));
        setShowData((prev) => {
          const mergedArray = [...data, ...prev];
          const uniqueMap = new Map();
          mergedArray.forEach((item) => {
            if (!uniqueMap.has(item.value)) {
              uniqueMap.set(item.value, item);
            }
          });
          const uniqueArray = Array.from(uniqueMap.values());
          return uniqueArray;
        });
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [getInitialData]);

  useEffect(() => {
    if (data && isSuccess) {
      setShowData((prev) => {
        const mergedArray = [...data, ...prev];
        const uniqueMap = new Map();
        mergedArray.forEach((item) => {
          if (!uniqueMap.has(item.value)) {
            uniqueMap.set(item.value, item);
          }
        });
        const uniqueArray = Array.from(uniqueMap.values());
        return uniqueArray;
      });
    } else if (data?.length === 0) {
      setShowData([]);
    }
  }, [isSuccess, data, initialData]);

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const debounceInputChange = useCallback(
    debounce((value: string) => {
      setInputValue({ shadowInput: value, inputValue: value });
    }, 300), // Adjust the debounce delay as needed
    [setInputValue]
  );

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = e.target.value;
    setInputValue((prev) => ({
      shadowInput: newValue,
      inputValue: prev.inputValue,
    }));
    debounceInputChange(newValue);
  };

  useEffect(() => {
    if (open && inputRef.current) {
      const intervalId = setInterval(() => {
        if (inputRef.current) {
          inputRef.current.focus();
          setOpen(true);
        }
      }, 1); // Adjust the interval time as needed

      // Clear the interval after 3 attempts
      setTimeout(() => {
        clearInterval(intervalId);
      }, 1); // 3 attempts with 100ms interval

      return () => clearInterval(intervalId); // Cleanup on unmount
    }
  }, [open]);

  // Handle keyboard navigation
  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "ArrowDown") {
      e.preventDefault();
      setHoveredIndex((prev) =>
        prev === null ? 0 : Math.min(prev + 1, showData.length - 1)
      );
    } else if (e.key === "ArrowUp") {
      e.preventDefault();
      setHoveredIndex((prev) =>
        prev === null ? showData.length - 1 : Math.max(prev - 1, 0)
      );
    } else if (e.key === "Enter" && hoveredIndex !== null) {
      e.preventDefault();
      onChange(showData[hoveredIndex].value);
      setOpen(alwaysOpen ? true : false);
    }
  };

  const handleSelect = (item: DataProps) => {
    if (multiple) {
      setSelectedItems((prev: string[]) => {
        const isSelected = prev?.includes(item.value);
        let newSelectedItems: any[] = [];
        if (isSelected) {
          newSelectedItems = prev?.filter(
            (selectedItem) => selectedItem !== item.value
          );
        } else if (prev) {
          newSelectedItems = [...prev, item.value];
        } else {
          newSelectedItems = [item.value];
        }
        onChange(newSelectedItems);
        return newSelectedItems;
      });
      if (inputRef.current) {
        inputRef.current.focus();
        setOpen(true);
      }
    } else {
      onChange(item.value);
    }
  };

  return (
    <div className={alwaysOpen ? "pb-56" : "h-fit"}>
      <Popover open={open} onOpenChange={alwaysOpen ? () => {} : setOpen}>
        <PopoverAnchor
          asChild
          className={cn("relative z-[100] w-full", parentClassName)}
        >
          <Input
            ref={inputRef}
            suffix={
              <ChevronDown
                className={cn(
                  "h-5 w-5 transition-all duration-500 ease-out !opacity-100 z-[100]",
                  open && "rotate-180"
                )}
              />
            }
            autoFocus
            onClick={() => {
              setOpen((prev) => (alwaysOpen ? true : !prev));
              if (inputRef.current) {
                inputRef.current.focus();
              }
            } }
            placeholder={placeholder}
            value={open ? shadowInput : value}
            onChange={handleInputChange}
            onKeyDown={handleKeyDown}
            key={id}
          />
        </PopoverAnchor>
        <PopoverContent
          key={id}
          forceMount
          asChild
          className={cn(
            "w-[--radix-popper-anchor-width] p-0 [[data-radix-popper-content-wrapper]:has(&)]:h-0",
            multiple && "shadow-none mt-1",
            !open && "pointer-events-none",
            contentClassName
          )}
        >
          <div className={cn("h-52 overflow-hidden py-2 px-2")}>
            <ScrollArea className="h-full gap-2">
              <AnimatePresence>
                {isLoading && (
                  <motion.div
                    initial={ { opacity: 0 } }
                    animate={ { opacity: 1 } }
                    exit={ { opacity: 0 } }
                    className="absolute size-full bg-slate-950/20 flex justify-center scale-[1.1] z-[1000]"
                  >
                    <Loader2 className="animate-spin mt-5" />
                  </motion.div>
                )}
              </AnimatePresence>
              {showData.length === 0 && !isLoading ? (
                <div className="p-4 text-center text-sm text-muted-foreground">
                  No results found.
                </div>
              ) : (
                <>
                  {showData?.map((item, index) => {
                    const isChecked = multiple
                      ? selectedItems?.find(
                          (selectedItem) => selectedItem == item.value
                        )
                      : item.value == value;
                    const isActive = hoveredIndex === index;
                    return (
                      <div
                        onClick={() => handleSelect(item)}
                        className={cn(
                          "mb-1 relative flex cursor-pointer select-none flex-col rounded-xl px-3 py-1.5 aria-disabled:pointer-events-none aria-disabled:opacity-50 aria-selected:bg-accent aria-selected:text-accent-foreground hover:bg-foreground/[0.05] transition-all duration-300 ease-out",
                          isChecked &&
                            "bg-foreground/[0.05] text-accent-foreground",
                          isActive && "bg-foreground/[0.1]"
                        )}
                        key={index}
                      >
                        <div className="pl-7 flex flex-col">
                          <span className="font-medium">{item?.label}</span>
                          <span className="text-sm text-foreground/60">
                            {item.description}
                          </span>
                        </div>
                        {isChecked && (
                          <span className="absolute start-3 top-0 flex z-[10] h-full items-center justify-center">
                            <Check className="h-5 w-5" strokeWidth={1.2} />
                          </span>
                        )}
                      </div>
                    );
                  })}
                </>
              )}
            </ScrollArea>
          </div>
        </PopoverContent>
      </Popover>
    </div>
  );
}

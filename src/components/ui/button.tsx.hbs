import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";
import { Loader2 } from "lucide-react";
import { AnimatePresence, motion } from "framer-motion";

const buttonVariants = cva(
  "inline-flex gap-1 items-center justify-center whitespace-nowrap rounded-lg text-base relative font-medium transition-all ease-out focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 hover:scale-[1.03] ",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input hover:border-accent bg-background shadow-sm text-foreground hover:bg-accent/10 hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        blue: "bg-blue text-background shadow-sm hover:bg-blue/80",
        info: "bg-info text-background shadow-sm hover:bg-info/80",
        success: "bg-success text-background shadow-sm hover:bg-success/80",
        ghost: "hover:bg-accent/10 hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        linkHover1:
          "relative py-0 my-[-1rem] mx-[-1rem] after:absolute after:bg-primary after:bottom-2 after:h-[2px] after:w-[75%] after:origin-bottom-left after:scale-x-100 hover:after:origin-bottom-right hover:after:scale-x-0 after:transition-transform after:ease-in-out after:duration-300",
        linkHover2:
          "relative py-0 my-[-1rem] mx-[-1.7rem] after:absolute after:bg-primary after:bottom-2 after:h-[2px] after:w-[55%] after:origin-bottom-right after:scale-x-0 hover:after:origin-bottom-left hover:after:scale-x-100 after:transition-transform after:ease-in-out after:duration-300",
      },
      size: {
        sm: "h-9 rounded-md px-3 text-xs",
        long: "h-12 px-4 py-2 min-w-[7rem] md:min-w-[10rem]",
        md: "h-10 rounded-lg px-4 text-sm",
        lg: "h-12 rounded-lg px-6",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "lg",
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
  loading?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    { className, children, variant, size, asChild = false, loading, ...props },
    ref
  ) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      >
        <AnimatePresence>
          {loading && (
            <motion.div
              initial={  { opacity: 0 }  }
              animate={  { opacity: 1 }  }
              exit={  { opacity: 0 }  }
              className="w-full h-full flex items-center justify-center bg-slate-800/20 absolute z-[5] top-0 left-0 "
            >
              <Loader2
                className="z-[10] h-5 w-5 animate-spin"
                strokeWidth={1.3}
              />
            </motion.div>
          )}
        </AnimatePresence>
        {children}
      </Comp>
    );
  }
);
Button.displayName = "Button";

export { Button, buttonVariants };

"use client";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { PasswordInput } from "@/components/ui/password-input";
import {
  updatePassword,
  updatePasswordSchema,
  UpdatePasswordSchemaProps,
} from "@/utils/auth";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation } from "@tanstack/react-query";
import { KeyRound, Loader2, Save } from "lucide-react";
import Link from "next/link";
import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import toast from "react-hot-toast";

const CredentialsForm = ({ initData }: { initData: any }) => {
  // =============== HOOKS ================

  const form = useForm<UpdatePasswordSchemaProps>({
    resolver: zodResolver(updatePasswordSchema),
  });
  const { isPending, mutate: mutateUpdatePassword } = useMutation({
    mutationKey: ["update-password"],
    mutationFn: (data: UpdatePasswordSchemaProps) => updatePassword(data),
    onSuccess: (res: any) => {
      localStorage.setItem("session", res.data.data.token);
      localStorage.setItem("user", JSON.stringify(res.data.data.user));
      toast.success(
        res?.response?.data?.message || "Successfully updated password"
      );
    },
    onError: (err: any) => {
      toast.error(err?.response?.data?.message || "Something went wrong");
      console.log(err);
    },
  });

  // =============== STATES ================

  const { handleSubmit, control, reset } = form;

  // =============== HANDLE ================

  useEffect(() => {
    if (initData) {
      const finalUser = {
        user_id: initData?.user?.user_id,
        old_password: "",
        new_password: "",
        confirm_password: "",
      };
      reset(finalUser);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [initData]);

  const onSubmit = handleSubmit((data) => {
    console.log("Submitted!: " + JSON.stringify(data));
    mutateUpdatePassword(data);
  });

  // =============== RENDER ================

  return (
    <Card className="relative overflow-hidden">
      {/* Loader */}
      {!initData?.user_id && (
        <div className="absolute top-0 left-0 bg-loader size-full flex items-center justify-center z-[2]">
          <Loader2 className="text-primary animate-spin" size={56} />
        </div>
      )}

      {/* Header */}
      <CardHeader>
        <CardTitle>
          <KeyRound className="mr-2 h-6 w-6 text-primary" />
          Credentials
        </CardTitle>
        <CardDescription>Update your password?</CardDescription>
      </CardHeader>

      {/* Conntent */}
      <Form {...form}>
        <form onSubmit={onSubmit}>
          <CardContent className="grid gap-4">
            {/* Old Password */}
            <FormField
              control={control}
              name="old_password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Old Password</FormLabel>
                  <FormControl>
                    <PasswordInput
                      placeholder="Input old password here"
                      {...field}
                      value={field.value as string | undefined}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* New Password */}
            <FormField
              control={control}
              name="new_password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>New Password</FormLabel>
                  <FormControl>
                    <PasswordInput
                      placeholder="Input new password here"
                      {...field}
                      value={field.value as string | undefined}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Confirm Password */}
            <FormField
              control={control}
              name="confirm_password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Confirm Password</FormLabel>
                  <FormControl>
                    <PasswordInput
                      placeholder="Input confirm password here"
                      {...field}
                      value={field.value as string | undefined}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Forgot password */}
            <Link href="/forgot-password" className="ml-auto">
              <Button variant="linkHover2">Forgot password?</Button>
            </Link>
          </CardContent>
          <CardFooter className="border-t px-6 py-4 flex flex-col justify-end items-end gap-4">
            <Button
              disabled={isPending}
              loading={isPending}
              size={"lg"}
              type="submit"
            >
              <Save className="h-5 w-5" strokeWidth={1.2} />
              Save
            </Button>
          </CardFooter>
        </form>
      </Form>
    </Card>
  );
};

export default CredentialsForm;
